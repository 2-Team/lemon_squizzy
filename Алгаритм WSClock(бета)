#include "stdafx.h"
#include <iostream>
 
using namespace std;
/*НАША СТРУКТУРА*/
struct List
{
    int x; //информационный элемент
    List *Next,*Head; //Голова и указатель на следующий элемент
};
 
/*ФУНКЦИЯ ДОБАВЛЕНИЯ страницв список LIFO)*/
void Add(int x, List *&MyList) //Принимаем элемент и указатель, при этом говорим, что принимаемый указатель будет сам по себе указателем
{
    List *temp=new List; //Выделяем память для нового элемента
    temp->x=x; //Записываем в поле x принимаемый в функцию элемент x
    temp->Next=MyList->Head; //Указываем, что следующая страница это предыдущая
    MyList->Head=temp; //Сдвигаем голову на позицию вперед
}
 
/*ФУНКЦИЯ ОТОБРАЖЕНИЯ*/
void Show(List *MyList) 
{
    List *temp=MyList->Head; //Объявляем указатель и Указываем ему, что его позиция в голове алгоритма
    //с помощью цикла проходим по всему алгоритму
    while (temp!=NULL) //выходим при встрече с пустым полем
    {
    cout<<temp->x<<" "; //Выводим на экран страницу
    temp=temp->Next; //Переходим к следующей странице
    }
}
 
/*ФУНКЦИЯ УДАЛЕНИЯ страницы ИЗ ПАМЯТИ*/
void ClearList(List *MyList)
    {
    while (MyList->Head!=NULL) //Пока по адресу не пусто
    {
    List *temp=MyList->Head->Next; //Временная переменная для хранения адреса следующей страницы
    delete MyList->Head; //Освобождаем адрес обозначающий начало
    MyList->Head=temp; //Меняем адрес на следующий
}
}
 
int main()
{
 
 
    List *MyList=new List; //Выделяем память для страниц
 
 
    MyList->Head=NULL; //Во избежание ошибок инициализируем первую страницу
 
    for (int i=0;i<10;i++) Add(i,MyList); //Заносим данные в страницу
 
 
    ClearList(MyList); //Очищаем память.
    delete MyList->Head;
    delete MyList;
	system("pause"); 
}
